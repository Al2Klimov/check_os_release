#!/usr/bin/env python

#
# Nagios plugin to check if current operating system version is outdated.
#

import sys
import argparse
from datetime import datetime, date, timedelta
import subprocess
import urllib2
import csv
from StringIO import StringIO


debianDistroDataUrl = "https://anonscm.debian.org/git/collab-maint/distro-info-data.git/plain/debian.csv"
ubuntuDistroDataUrl = "https://anonscm.debian.org/git/collab-maint/distro-info-data.git/plain/ubuntu.csv"


def checkDebianUbuntu(nagiosOutput, distroDataUrl, eolWarnDays, checkForLTS=False, checkForServer=False):
    """
    Check currently installed Debian (or Ubuntu) release against online data from from distro-info-data package.
    """
    csvText = urllib2.urlopen(distroDataUrl).read()

    currentCodename = subprocess.check_output(["lsb_release", "--codename", "--short"]).rstrip("\n")
    currentReleaseData = None

    csvFp = StringIO(csvText)
    csvReader = csv.DictReader(csvFp)

    for row in csvReader:
        if row["series"] == currentCodename:
            currentReleaseData = row
            break
    else:
        raise Exception("current release '%s' not found in release list" % currentCodename)

    def parseCsvDate(string):
        return datetime.strptime(string, "%Y-%m-%d").date()
    nowDate = date.today()

    # check if there is a newer release available (by continuing to read from CSV buffer):
    newestUpgrade = None
    for row in csvReader:
        if checkForLTS and not(row["version"].endswith(" LTS")):
            continue
        if row["release"] is not None and parseCsvDate(row["release"]) <= nowDate:
            newestUpgrade = row
    if newestUpgrade is not None:
        nagiosOutput.addResult(NagiosOutput.LEVEL_WARN, "newer release '%s' (%s) is available" % (newestUpgrade["series"], newestUpgrade["version"]))

    # check if current release is EOL
    if checkForServer and currentReleaseData.has_key("eol-server") and currentReleaseData["eol-server"] is not None:
        eolDate = parseCsvDate(currentReleaseData["eol-server"])
    else:
        eolDate = parseCsvDate(currentReleaseData["eol"])
    if eolDate:
        if nowDate > eolDate:
            nagiosOutput.addResult(NagiosOutput.LEVEL_CRITICAL, "release '%s' has been EOL for %d days" % (currentCodename, (nowDate - eolDate).days))
        elif nowDate > eolDate - timedelta(days=eolWarnDays):
            nagiosOutput.addResult(NagiosOutput.LEVEL_WARN, "release '%s' will be EOL in %d days" % (currentCodename, (eolDate - nowDate).days))


class NagiosOutput:
    "Class for collecting results and aggregating them into a single status output."
    LEVEL_OK = 0
    LEVEL_WARN = 1
    LEVEL_CRITICAL = 2

    def __init__(self, name):
        self.name = name
        self.level = self.LEVEL_OK
        self.messages = []

    def abort(self, msg):
        print "%s ERROR (%s)" % (self.name, msg)
        sys.exit(3)

    def addResult(self, level, msg):
        if level not in (self.LEVEL_OK, self.LEVEL_WARN, self.LEVEL_CRITICAL):
            self.abort("invalid error level '%s'" % level)
        self.level = max(self.level, level)
        self.messages.append(msg)

    def reportAndExit(self):
        result = self.name + " "
        if self.level == self.LEVEL_OK:
            result += "OK"
        elif self.level == self.LEVEL_WARN:
            result += "WARNING"
        else:
            result += "CRITICAL"
        result += " - " + ("; ".join(self.messages))
        print result
        sys.exit(self.level)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Check whether OS release is outdated.")
    parser.add_argument("--eolWarnDays", type=int, metavar="DAYS", default=30, help="warn if less than DAYS until end-of-life")
    parser.add_argument("--lts", action="store_true", help="[Ubuntu] check only for LTS releases")
    parser.add_argument("--server", action="store_true", help="[Ubuntu] check for server EOL dates")
    args = parser.parse_args()

    nagiosOutput = NagiosOutput("OSRELEASE")
    try:
        distro = subprocess.check_output(["lsb_release", "--id", "--short"]).rstrip("\n")
        if distro == "Debian":
            checkDebianUbuntu(nagiosOutput, debianDistroDataUrl, args.eolWarnDays)
        elif distro == "Ubuntu":
            checkDebianUbuntu(nagiosOutput, ubuntuDistroDataUrl, args.eolWarnDays, args.lts, args.server)
        else:
            raise Exception("unknown distribution '%s'" % distro)
        nagiosOutput.reportAndExit()
    except Exception, e:
        nagiosOutput.abort(e)
